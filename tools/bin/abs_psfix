#! /usr/bin/perl

use strict;
use Font::TTF::Font;
use Font::TTF::PSNames qw(lookup parse);
use Getopt::Std;

our ($opt_v, $opt_q, $VERSION);

getopts('v');

$VERSION = '0.4';	# 2016-06-29  BH
# Added -q option and refined -v logic
#VERSION = '0.3';	# 2004-04-21  BH
# Now preserves glyph name if possible
# Use Font::TTF::PSName functions instead of custom ones.
# Corrected the "glyph retained" messages for -v.
#VERSION = '0.2';	# 2004-11-01  BH
# Updated to Adobe Glyph List for New Fonts 1.1 (from Adobe's aglfn13.txt)
# plus U+000D -> nonmarkingreturn
# add support for things like absHeh.knotted
#VERSION = '0.1'; # original derived from psfix.pl.

unless (defined $ARGV[1])
{
    die <<"EOT";

ABSPsFix [-v|-q] infile outfile

Updates Postscript table to account for Postscript Unicode conventions. 


Enhanced to understand ABS-CS conventions:
	Do not use afii names
	Handle unencoded glyphs with names matching /abs.+Ini/, /abs.+Med/ and /abs.+Fin/ and similar

Outputs to stdout the names of glyphs for which AGL names could not be 
determined (but likely should be AGL-compliant).

  -v verbose: prints information about all glyph name changes.
  -q quiet: does not print anything except for warnings and fatal errors

Version $VERSION
EOT
}

# Variables to hold font, cmap, post table, and count of glyphs:
my ($f, $c, $p, $num);

# Array, indexed by GID, returning array of USVs for this glyph.
my @res;

# Array, indexed by GID, returning boolean true if we managed to set this glyphname
my @isSet;

# Hash, indexed by old glyph names, returning new name (for encoded glyphs):
my %newName;

# List of glyph pairs that need to be checked for duplicate name once we are done.
my @possibleDuplicates;

# Conversion between ABS glyph name endings and standard usage Adobe suffixes:
my %suffix = ( Ini => '.init', Med => '.medi', Fin => '.fina');

my $i;	# Normally Glyph ID
my $u;	# Unicode scalar value, normally decimal integer

# Open font:
$f = Font::TTF::Font->open($ARGV[0]) || die ("Couldn't open TTF '$ARGV[0]'\n");
die 'No post table found\n' unless defined $f->{'post'};
$p = $f->{'post'}->read;
$c = $f->{'cmap'}->read->find_ms;
$num = $f->{'maxp'}{'numGlyphs'};

sub AssignName
{
	my ($i, $newName, $reason) = @_;
	$isSet[$i] = 1;
	return if $newName eq $p->{'VAL'}[$i];	# Nothing else to do
	push @possibleDuplicates, [$i,$p->{'STRINGS'}{$newName}] if exists $p->{'STRINGS'}{$newName};
	print "$reason:\t$i\t$p->{'VAL'}[$i]\t$newName\n" if $opt_v;
	$newName{$p->{'VAL'}[$i]} = $newName;
	$p->{'VAL'}[$i] = $newName;
}

# Build @res by reading through cmap:
foreach $u (keys %{$c->{'val'}})
{
    $i = $c->{'val'}{$u};
    push(@{$res[$i]}, $u);
}

# First pass: Set names we can based on cmap

for ($i = 1; $i < $num; $i++)       # skip .notdef for 0
{
    unless (defined $res[$i])
    {
    	# No Unicode value, use some other scheme
    	# For now, just clean up Encore names (but see below for second pass):
        $p->{'VAL'}[$i] =~ s/^([0-9]+)/sil$1/oi
            || $p->{'VAL'}[$i] =~ s/[:+-]/sil/oig;
        next;
    }
    
    # Determine whether current glyphname represents a single Unicode char and, if so, its USV.
    my $currentUSV = parse($p->{'VAL'}[$i]);  # This returns ref to an array ... not quite what we want
    $currentUSV = (@{$currentUSV} == 1 ? $currentUSV->[0] : undef);
    
    # Find lowest USV with a non-generic name.
    # While looking, see if the current name would suffice
    my @u = sort {$b <=> $a} @{$res[$i]};  # Ordered largest to smallest.
    my ($n);
    foreach (@u)
    {
        if ($_ == $currentUSV)
        {
        	# Current name is perfect...keep it.
        	$isSet[$i] = 1;
        	last;
        }
        $n = lookup($_, 0, 1);
    }
    
    unless ($isSet[$i])
    {
		# Current name is not acceptable.
		# If non-generic name not yet found create one from lowest USV:
    	$n = lookup($u[-1]) unless defined $n;
    	# Make the assignment
    	AssignName $i, $n, 'CMAP';
    }
}

# Second pass: Handle unencoded ABS contextual variants
for ($i = 1; $i < $num; $i++)       # skip .notdef for 0
{
    next if $isSet[$i];
    
    # Parse abs glyph name:
    if ($p->{'VAL'}[$i] =~ /^(abs.+?)(Ini|Med|Fin)?(\..+)?$/o)
    {
    	my ($basename, $type, $variant) = ($1, $2, $3);
	    # Handle names that match already processed ABS name plus Ini, Med, or Fin ending:
    	if (exists $newName{$basename})
    	{
    		# Simple case:
    		AssignName $i, "$newName{$basename}$suffix{$type}$variant", 'CONTEXT';
    		next;
    	}
    	# Handle ligatures
    	$basename =~ s/^absShaddaAlef/absShaddaSuperscriptAlef/;	# Hack for ShaddaAlef ligature
    	$basename =~ s/^absHamza/absHamzaAbove/;					# Hack for Hamza ligatures
    	$basename =~ s/^absLamHamza/absLamHamzaAbove/;				# Hack for LamHamza ligatures
    	$basename =~ s/^abs(Fatha|Damma|Kasra)Meem/abs\1SmallHighMeemIsolatedForm/;	# Hack for more mark ligatures

    	if ($basename =~ /^abs(Lam.*)(Alef.*)$/o  || $basename =~ /^abs(Shadda|HamzaAbove|Fatha|Damma|Kasra|Lam|Alef)(.+)$/)
    	{
    		# See if we can handle a ligature:
    		if (exists $newName{"abs$1"} && exists $newName{"abs$2"})
    		{
    			# Yup!  Build ligature using "_"
    			my $n = $newName{"abs$1"} . "_" . $newName{"abs$2"} . "$suffix{$type}$variant";
    			# Compress out the _uni from names like uniXXXX_uniXXXX
    			$n =~ s/(uni(?:[0-9A-F]{4,4})+)_uni((?:[0-9A-F]{4,4})+)/$1$2/oi;
    			AssignName $i, $n, 'LIGATURE';
    			next;
    		}
    	}
	}
	
	# If name ends in any of: Alt.*, Medium, Small, \d+, \d+sp
    if ($p->{'VAL'}[$i] =~ /^(.+?)\.?(Alt.*)$/ || $p->{'VAL'}[$i] =~ /^(.+?)\.?(Medium|Small|\d+(?:sp)?)$/)
    {
    	my ($basename, $type) = ($1, $2);
    	if (exists $newName{$basename})
    	{
    		# Simple case:
    		AssignName $i, "$newName{$basename}.$type", 'SPECIAL';
    		next;
    	}
    	elsif (@{scalar(parse($basename))} > 0 )
    	{
    		# the basename is recognized, so keep it
    		AssignName $i, "$basename.$type", 'SPECIAL';
    		next;
    	}
    }

   # Print a list of residue:
    if (@{scalar(parse($p->{'VAL'}[$i]))} > 0 )
    {
    	# This glyph has an adobe-recognized name
    	print "Retain:\t$i\t$p->{'VAL'}[$i]\t$p->{'VAL'}[$i]\t(Adobe-recognized)\n" if $opt_v;
    }
    elsif ($p->{'VAL'}[$i] =~ /^(_.*|.null|nonmarkingreturn|tab)$/)
    {
    	# This glyph has a non-adobe name but probably doesn't need one.
        print "Retain:\t$i\t$p->{'VAL'}[$i]\t$p->{'VAL'}[$i]\t(non-Adobe)\n" if $opt_v;
    }
    else
    {
    	# This glyph has a non-adobe name but probably needs one
        print "Retain:\t$i\t$p->{'VAL'}[$i]\t$p->{'VAL'}[$i]\t(non-Adobe)\n" unless $opt_q;

    }
}

# See if we really ended up with any duplicate names:
foreach (@possibleDuplicates)
{
	my ($i, $j) = @{$_};
	print STDERR "name '$p->{'VAL'}[$i]' assigned to glyphs $i and $j\n" if $p->{'VAL'}[$i] eq $p->{'VAL'}[$j];
}

$f->out($ARGV[1]);

